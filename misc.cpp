#include	"Misc.h"

signed short sin_cos_table[256+64]={
	0x0000,0x0006,0x000c,0x0012,0x0019,0x001f,0x0025,0x002b,
	0x0031,0x0038,0x003e,0x0044,0x004a,0x0050,0x0056,0x005c,
	0x0061,0x0067,0x006d,0x0073,0x0078,0x007e,0x0083,0x0088,
	0x008e,0x0093,0x0098,0x009d,0x00a2,0x00a7,0x00ab,0x00b0,
	0x00b5,0x00b9,0x00bd,0x00c1,0x00c5,0x00c9,0x00cd,0x00d1,
	0x00d4,0x00d8,0x00db,0x00de,0x00e1,0x00e4,0x00e7,0x00ea,
	0x00ec,0x00ee,0x00f1,0x00f3,0x00f4,0x00f6,0x00f8,0x00f9,
	0x00fb,0x00fc,0x00fd,0x00fe,0x00fe,0x00ff,0x00ff,0x00ff,
	0x0100,0x00ff,0x00ff,0x00ff,0x00fe,0x00fe,0x00fd,0x00fc,
	0x00fb,0x00f9,0x00f8,0x00f6,0x00f4,0x00f3,0x00f1,0x00ee,
	0x00ec,0x00ea,0x00e7,0x00e4,0x00e1,0x00de,0x00db,0x00d8,
	0x00d4,0x00d1,0x00cd,0x00c9,0x00c5,0x00c1,0x00bd,0x00b9,
	0x00b5,0x00b0,0x00ab,0x00a7,0x00a2,0x009d,0x0098,0x0093,
	0x008e,0x0088,0x0083,0x007e,0x0078,0x0073,0x006d,0x0067,
	0x0061,0x005c,0x0056,0x0050,0x004a,0x0044,0x003e,0x0038,
	0x0031,0x002b,0x0025,0x001f,0x0019,0x0012,0x000c,0x0006,
	0x0000,0xfffa,0xfff4,0xffee,0xffe7,0xffe1,0xffdb,0xffd5,
	0xffcf,0xffc8,0xffc2,0xffbc,0xffb6,0xffb0,0xffaa,0xffa4,
	0xff9f,0xff99,0xff93,0xff8d,0xff88,0xff82,0xff7d,0xff78,
	0xff72,0xff6d,0xff68,0xff63,0xff5e,0xff59,0xff55,0xff50,
	0xff4b,0xff47,0xff43,0xff3f,0xff3b,0xff37,0xff33,0xff2f,
	0xff2c,0xff28,0xff25,0xff22,0xff1f,0xff1c,0xff19,0xff16,
	0xff14,0xff12,0xff0f,0xff0d,0xff0c,0xff0a,0xff08,0xff07,
	0xff05,0xff04,0xff03,0xff02,0xff02,0xff01,0xff01,0xff01,
	0xff00,0xff01,0xff01,0xff01,0xff02,0xff02,0xff03,0xff04,
	0xff05,0xff07,0xff08,0xff0a,0xff0c,0xff0d,0xff0f,0xff12,
	0xff14,0xff16,0xff19,0xff1c,0xff1f,0xff22,0xff25,0xff28,
	0xff2c,0xff2f,0xff33,0xff37,0xff3b,0xff3f,0xff43,0xff47,
	0xff4b,0xff50,0xff55,0xff59,0xff5e,0xff63,0xff68,0xff6d,
	0xff72,0xff78,0xff7d,0xff82,0xff88,0xff8d,0xff93,0xff99,
	0xff9f,0xffa4,0xffaa,0xffb0,0xffb6,0xffbc,0xffc2,0xffc8,
	0xffcf,0xffd5,0xffdb,0xffe1,0xffe7,0xffee,0xfff4,0xfffa,
	0x0000,0x0006,0x000c,0x0012,0x0019,0x001f,0x0025,0x002b,
	0x0031,0x0038,0x003e,0x0044,0x004a,0x0050,0x0056,0x005c,
	0x0061,0x0067,0x006d,0x0073,0x0078,0x007e,0x0083,0x0088,
	0x008e,0x0093,0x0098,0x009d,0x00a2,0x00a7,0x00ab,0x00b0,
	0x00b5,0x00b9,0x00bd,0x00c1,0x00c5,0x00c9,0x00cd,0x00d1,
	0x00d4,0x00d8,0x00db,0x00de,0x00e1,0x00e4,0x00e7,0x00ea,
	0x00ec,0x00ee,0x00f1,0x00f3,0x00f4,0x00f6,0x00f8,0x00f9,
	0x00fb,0x00fc,0x00fd,0x00fe,0x00fe,0x00ff,0x00ff,0x00ff,
};


// ----
float GetTimeDifference(LPSYSTEMTIME _Now, LPSYSTEMTIME _Then)
{
	float	ret = 0.0f;

	if ((_Now) && (_Then))
	{
		ret += (float)((_Now->wYear			- _Then->wYear)				* 60 * 60 * 24 * 32 * 14);
		ret += (float)((_Now->wMonth		- _Then->wMonth)			* 60 * 60 * 24 * 32);
		ret += (float)((_Now->wDay			- _Then->wDay)				* 60 * 60 * 24);
		ret += (float)((_Now->wHour			- _Then->wHour)				* 60 * 60);
		ret += (float)((_Now->wMinute		- _Then->wMinute)			* 60);
		ret += (float)((_Now->wSecond		- _Then->wSecond));
		ret += (float)((_Now->wMilliseconds	- _Then->wMilliseconds))	/ 1000.0f;
	}
	return ret;
}


// ----
// Tells you the length of a file - "_filelength" is not provided for CE.
long GetFileSize(CString* _FileName)
{
	FILE	*FH;
	long	ret	= -1;
	
	if (_FileName && _FileName->GetString())
	{
		FH = FOPEN(_FileName->GetString(), "rb");
		if (FH)
		{
			fseek(FH, 0, SEEK_END);		// Seek end	
			ret = ftell(FH);
			fclose(FH);
		}
	}
	return ret;
}

// ----
// Returns true if the point is within the bounds of the 
// rect - the test is inclusive on the top left edge, and 
// exclusive on the bottom right.
bool	IsPointInRect(POINT* _Pos, RECT* _Rect)
{
	return 	(	(_Pos) 
			&&	(_Rect)
			&&	(_Pos->y >=	_Rect->top)
			&& 	(_Pos->y <	_Rect->bottom)
			&& 	(_Pos->x >= _Rect->left)
			&& 	(_Pos->x <	_Rect->right)
			);
}


// ----
// Rounds _Value to the nearest _Span.
// Modes 
//	-1	=> round down
//	0	=> round at mid point
//	1	=> round up
int		Round(int _Value, int _Snap, int _Mode) 
{
	switch (_Mode)
	{
	case -1:
		return ((_Value / _Snap) * _Snap);
	case 0:
		return (((_Value + (_Snap >> 1)) / _Snap) * _Snap);
	case 1:
		return (((_Value + (_Snap >> 1)) / _Snap) * _Snap);
	default:
		NODEFAULT;
		return 0;
	}
}

// ----
// Returns whether the file could be opened.
bool	TestReadFile(CString*	_FileName)
{
	FILE	*FH;
	
	if (_FileName && _FileName->GetString())
	{
		FH = FOPEN(_FileName->GetString(), "rb");
		if (FH)
		{
			fclose(FH);
			return true;
		}
	}
	return false;
}

// ----
// Really complicated encryption algorithm
void	ChangeEncryptionState(char*	_Buffer, int _Count)
{
	if ((_Count < 1) || (!_Buffer))
		return;

	for (int i = _Count; i--;)
	{
		*(_Buffer + i) = (*(_Buffer + i)) ^ 0xFF; 
	}
}

// Convert from portrait mode co-ordiantes to the 
// co-ordinates for the specified orientation.
void	ConvertCoordSpace(POINT _A, POINT	*_B, EOrientation _C)
{
	switch (_C)
	{
	case EO_Portrait_Normal:
		_B->x = _A.x;
		_B->y = _A.y;
		break;
	case EO_Landscape_Normal:
		_B->x = _A.y;
		_B->y = 239 - _A.x;
		break;
	case EO_Landscape_Flipped:
		_B->x = 319 - _A.y;
		_B->y = _A.x;
		break;
	}
}